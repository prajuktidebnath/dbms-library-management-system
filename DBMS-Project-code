import sqlite3
import datetime

# Connect to SQLite database
conn = sqlite3.connect('library_management.db')
cursor = conn.cursor()

# Create tables
cursor.execute('''
CREATE TABLE IF NOT EXISTS Students (
    roll_no INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    password TEXT NOT NULL,
    is_blocked BOOLEAN DEFAULT 0
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS Books (
    book_id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    author TEXT NOT NULL,
    available BOOLEAN DEFAULT 1
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS Issued_Books (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    roll_no INTEGER,
    book_id INTEGER,
    issue_date DATE,
    return_date DATE,
    fine INTEGER DEFAULT 0,
    FOREIGN KEY (roll_no) REFERENCES Students(roll_no),
    FOREIGN KEY (book_id) REFERENCES Books(book_id)
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS Feedback (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    roll_no INTEGER,
    feedback TEXT,
    FOREIGN KEY (roll_no) REFERENCES Students(roll_no)
)''')

# Insert default students
students = [
    (40, 'Riddhima Chanda', 'password40'),
    (45, 'Roshni Roy Banik', 'password45'),
    (52, 'Prajukti Debnath', 'password52'),
    (54, 'Ritam Das', 'password54'),
    (53, 'Sarasij Das', 'password53')
]
cursor.executemany('INSERT OR IGNORE INTO Students (roll_no, name, password) VALUES (?, ?, ?)', students)

# Insert default books
books = [
    ('Introduction to Software Engineering', 'Rajiv Mall'),
    ('Indian Polity', 'M. Laxmikanth'),
    ('Ancient India', 'RS Sharma'),
    ('Make Epic Money', 'Ankur Warikoo'),
    ('Quantitative Aptitude for Competitive Examinations', 'R.S. Aggarwal')
]
cursor.executemany('INSERT OR IGNORE INTO Books (title, author) VALUES (?, ?)', books)
conn.commit()

# Admin credentials
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "admin123"

# Admin functions
def admin_login():
    username = input("Enter admin username: ")
    password = input("Enter admin password: ")
    if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
        print("Admin login successful.")
        admin_menu()
    else:
        print("Incorrect admin credentials.")

def admin_menu():
    while True:
        print("\nAdmin Menu:")
        print("1. Add Book")
        print("2. View Books")
        print("3. View Issued Books")
        print("4. View Pending Returns")
        print("5. View Total Fine Accumulated")
        print("6. View Feedback")
        print("7. Logout")
        choice = input("Choose an option: ")
        
        if choice == '1':
            add_book()
        elif choice == '2':
            view_books()
        elif choice == '3':
            view_issued_books()
        elif choice == '4':
            view_pending_returns()
        elif choice == '5':
            view_total_fine()
        elif choice == '6':
            view_feedback()
        elif choice == '7':
            break
        else:
            print("Invalid option.")

def add_book():
    title = input("Enter book title: ")
    author = input("Enter book author: ")
    cursor.execute("INSERT INTO Books (title, author) VALUES (?, ?)", (title, author))
    conn.commit()
    print(f"Book '{title}' added successfully.")

def view_books():
    cursor.execute("SELECT * FROM Books")
    books = cursor.fetchall()
    print("\nBooks in Library:")
    for book in books:
        print(f"ID: {book[0]}, Title: {book[1]}, Author: {book[2]}, Available: {'Yes' if book[3] else 'No'}")

def view_issued_books():
    cursor.execute("SELECT * FROM Issued_Books")
    issued_books = cursor.fetchall()
    print("\nIssued Books:")
    for issue in issued_books:
        print(f"Issue ID: {issue[0]}, Roll No: {issue[1]}, Book ID: {issue[2]}, Issue Date: {issue[3]}, Return Date: {issue[4]}, Fine: {issue[5]}")

def view_pending_returns():
    cursor.execute("SELECT * FROM Issued_Books WHERE return_date IS NULL")
    pending = cursor.fetchall()
    print("\nPending Returns:")
    for issue in pending:
        print(f"Roll No: {issue[1]}, Book ID: {issue[2]}, Issue Date: {issue[3]}")

def view_total_fine():
    cursor.execute("SELECT SUM(fine) FROM Issued_Books")
    total_fine = cursor.fetchone()[0]
    print(f"\nTotal Fine Accumulated: {total_fine if total_fine else 0}")

def view_feedback():
    cursor.execute("SELECT * FROM Feedback")
    feedbacks = cursor.fetchall()
    print("\nFeedbacks:")
    for feedback in feedbacks:
        print(f"Roll No: {feedback[1]}, Feedback: {feedback[2]}")

# Student functions
def student_login():
    roll_no = input("Enter your roll number: ")
    password = input("Enter your password: ")
    cursor.execute("SELECT * FROM Students WHERE roll_no = ? AND password = ?", (roll_no, password))
    student = cursor.fetchone()
    
    if student:
        print("Student login successful.")
        student_menu(student[0])
    else:
        print("Incorrect roll number or password.")

def student_menu(roll_no):
    while True:
        print("\nStudent Menu:")
        print("1. View Books")
        print("2. Issue Book")
        print("3. Return Book")
        print("4. Give Feedback")
        print("5. Logout")
        choice = input("Choose an option: ")
        
        if choice == '1':
            view_books()
        elif choice == '2':
            issue_book(roll_no)
        elif choice == '3':
            return_book(roll_no)
        elif choice == '4':
            give_feedback(roll_no)
        elif choice == '5':
            break
        else:
            print("Invalid option.")

def issue_book(roll_no):
    cursor.execute("SELECT book_id, title FROM Books WHERE available = 1")
    books = cursor.fetchall()
    print("\nAvailable Books:")
    for book in books:
        print(f"ID: {book[0]}, Title: {book[1]}")
    book_id = int(input("Enter Book ID to issue: "))
    
    # Issue book if eligible
    cursor.execute("UPDATE Books SET available = 0 WHERE book_id = ?", (book_id,))
    cursor.execute("INSERT INTO Issued_Books (roll_no, book_id, issue_date) VALUES (?, ?, ?)", (roll_no, book_id, datetime.date.today()))
    conn.commit()
    print(f"Book ID {book_id} issued to roll number {roll_no}.")

def return_book(roll_no):
    cursor.execute("SELECT book_id FROM Issued_Books WHERE roll_no = ? AND return_date IS NULL", (roll_no,))
    issued_books = cursor.fetchall()
    if not issued_books:
        print("No books to return.")
        return
    for book in issued_books:
        book_id = book[0]
        cursor.execute("UPDATE Books SET available = 1 WHERE book_id = ?", (book_id,))
        cursor.execute("UPDATE Issued_Books SET return_date = ?, fine = ? WHERE roll_no = ? AND book_id = ?", 
                       (datetime.date.today(), 0, roll_no, book_id))  # Fine calculation to be added
    conn.commit()
    print("Book returned successfully.")

def give_feedback(roll_no):
    feedback_text = input("Enter your feedback: ")
    cursor.execute("INSERT INTO Feedback (roll_no, feedback) VALUES (?, ?)", (roll_no, feedback_text))
    conn.commit()
    print("Feedback submitted.")

# Main function
def main():
    print("Welcome to the Library Management System!")
    user_type = input("Login as (1) Admin or (2) Student: ")
    if user_type == '1':
        admin_login()
    elif user_type == '2':
        student_login()
    else:
        print("Invalid choice. Exiting.")

main()
